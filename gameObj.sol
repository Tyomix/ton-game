
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;


import "gameObjInt.sol";


contract gameObj is gameObjInt {
    
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();
    }

    function catchAtk(int atkPwr, address target) external override returns(bool fatal)  {

        tvm.accept();
        
        address attacker = msg.sender;
        int damage = atkPwr - target.getDef();
        if (damage < 1) {damage = 1;}
        target.HP -= damage;
        if (target.HP < 0) {
            fatal = true; 
            target.destroy(attacker);
         }
         else {fatal = false;}
 
 
     }



}
