
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

import "gameObjInt.sol";


contract archer {

    int public HP;
    int public atk;
    int public def;
   
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();

        HP = 10;
        atk = 5;
        def = 2;        

    }

    modifier tvmAccept {

		tvm.accept();
		_;
	}

    function attackTarget (gameObjInt obj, address target) internal tvmAccept  {

        require(msg.pubkey() == tvm.pubkey(), 102);

        obj.catchAtk(atk, target);
        

    }


    function getDef () public tvmAccept returns (int) {
            
        return def;
    }

    function getAtk () public tvmAccept returns (int) {
        
        return atk;

    }

    function HPleft () public tvmAccept returns (int) {
        
        return HP;

    }

    function destroy (address killer) public tvmAccept  {


        killer.transfer(1, false, 128);

    }




}
